@startuml
class AuthenticationController{
AuthenticationService service
ResponseEntity<AuthenticationResponse> register(
@RequestBody RegisterRequest request)
ResponseEntity<AuthenticationResponse> authenticate(
@RequestBody AuthenticationRequest request)
}


AuthenticationController --> AuthenticationService


class AuthenticationRequest{
private String username
String password
}

class AuthenticationResponse{
private String token
}

enum Role {
    USER,
    ADMIN,
    BANK
}

interface UserDetails {
}

User .-|> UserDetails

class User {
Long id
String username
String password
Role role
Boolean enabled
String email
Boolean isSubscribe
Collection<? extends GrantedAuthority> getAuthorities()
boolean isAccountNonExpired()
boolean isAccountNonLocked()
boolean isCredentialsNonExpired()
boolean isEnabled()
}

User -> Role
User <.. UserDbServiceImpl

class RegisterRequest{
private String username
private String password
}

class SecurityConfig {
JwtAuthenticationFilter jwtAuthFilter
AuthenticationProvider authenticationProvider
@Bean SecurityFilterChain securityFilterChain(HttpSecurity http)
}

SecurityConfig --> JwtAuthenticationFilter
ApplicationConfig <- SecurityConfig

class JwtService {
String SECRET_KEY =
String extractUsername(String token)
<T> T extractClaim(String token, Function<Claims, T> claimsResolver)
String generateToken(UserDetails userDetails)
 String generateToken(
            Map<String, Object> extraClaims,
            UserDetails userDetails
    )
boolean isTokenValid(String token, UserDetails userDetails)
boolean isTokenExpired(String token)
Date extractExpiration(String token)
Claims extractAllClaims(String token)
Key getSigningKey()
}

JwtService -> UserDetails


class JwtAuthenticationFilter{
JwtService jwtService
UserDetailsService userDetailsService
void doFilterInternal()
}

JwtAuthenticationFilter --> JwtService
ApplicationConfig <- JwtAuthenticationFilter



class AuthenticationService {
UserRepository repository
PasswordEncoder passwordEncoder
JwtService jwtService
AuthenticationManager authenticationManager
AuthConfig authConfig
AuthenticationResponse register(RegisterRequest request)
AuthenticationResponse authenticate(AuthenticationRequest request)
}

ApplicationConfig <-- AuthenticationService
AuthenticationService --> UserRepository
AuthenticationService -> JwtService
AuthConfig <-- AuthenticationService
AuthenticationService .> AuthenticationRequest
RegisterRequest <. AuthenticationService
AuthenticationService ... AuthenticationResponse

interface UserDbService {
User findUserByUsername(String username)
}


UserDbServiceImpl .|> UserDbService

class UserDbServiceImpl{
UserRepository userRepository
User findUserByUsername(String username)
}

UserRepository <- UserDbServiceImpl




class AuthConfig {
private String bankUsername
private String bankPassword
}



interface ClientsRepository{
}
ClientsRepository .> Client

interface UserRepository{
Optional<User> findUserByUsername(String username)
}

User <.. UserRepository

interface VisitorRepository {
}

VisitorRepository .> CharacterResult

interface JpaRepository {
}


UserRepository --|> JpaRepository
JpaRepository <|- ClientsRepository
JpaRepository <|- VisitorRepository




class ApplicationConfig {
AuthConfig authConfig
@Bean UserDetailsService userDetailsService()
@Bean AuthenticationProvider authenticationProvider()
@Bean PasswordEncoder passwordEncoder()
@Bean AuthenticationManager authenticationManager(AuthenticationConfiguration config)
}

AuthConfig <- ApplicationConfig


class BankRestController {
BankApiService bankApiService
BankDbService bankDbService
UserDbService userDbService
Counter transactionGoodCounter = Metrics.counter("transactionGoodCounter")
ResponseEntity<Characters> getVisitors(@PathVariable("page") String page)
ResponseEntity<Message> addToBank(@PathVariable("id") Integer id)
ResponseEntity<Message> deleteCandidateFromBank(@PathVariable("id") Integer id)
ResponseEntity<Characters> getPageCandidates(@PathVariable("page") String page)
ResponseEntity<Message> addCandidateToClient(@PathVariable("id") Integer id)
ResponseEntity<Message> deleteClient(@PathVariable("id") Long id)
ResponseEntity<ClientsList> getPageCardsInSale(@PathVariable("page") Integer page)
ResponseEntity<Message> updateClient(Client client)
ResponseEntity<Message> transaction(@RequestBody Transaction transaction)
ResponseEntity<User> findUserByName(@PathVariable("name") String name)
}

BankRestController -> BankApiService
BankRestController --> BankDbService
UserDbService <- BankRestController
BankRestController --> BankRestExceptionController


interface BankDbService {
void saveOneVisitor(CharacterResult characterResult
Characters getPageBankCandidates(Integer page)
Message deleteVisitorById(Integer id)
Message saveOneClientById(Integer id)
List<CharacterResult> getAllClients()
ClientsList getPageBankClients(Integer page)
Message deleteClientById(Long id)
Message saveClient(Client client)
Client findClientById(Long id)
Client findClientByName(String name)
void transaction(Transaction transaction)
}

BankDbServiceImpl .|> BankDbService
BankDbServiceImpl .> ExcessAmountException
BankDbServiceImpl .> ResourceNotFoundException
BankDbService ..> ClientsList
BankDbService ..> Client
BankDbService ..> Characters
BankDbService ..> CharacterResult

class BankDbServiceImpl{
VisitorRepository visitorRepository
ClientsRepository clientsRepository
void saveOneVisitor(CharacterResult characterResult)
Characters getPageBankCandidates(Integer page)
Message deleteVisitorById(Integer id)
Message saveOneClientById(Integer id)
List<CharacterResult> getAllClients()
ClientsList getPageBankClients(Integer page)
Message deleteClientById(Long id)
Message saveClient(Client client)
Client findClientById(Long id)
Client findClientByName(String name)
void transaction(Transaction transaction)
}

VisitorRepository <- BankDbServiceImpl
ClientsRepository <- BankDbServiceImpl







interface BankApiService {
Characters getAllCharacters(String page)
Message saveOneCharacterById(Integer id)
}

BankApiService <|.. BankApiServiceImpl


class BankApiServiceImpl{
BankDbService characterDbService
BasicConfig basicConfig
RestTemplate restTemplate
HttpHeaders headers
HttpEntity<String> getRequestEntity()
Characters getAllCharacters(String page)
CharacterInfo getCharacterInfo(Characters allCharacters)
Message saveOneCharacterById(Integer id)
}

BankDbService <- BankApiServiceImpl

BasicConfig <- BankApiServiceImpl

BankApiServiceImpl -> BankServerApp
BankApiServiceImpl ..> Characters
BankApiServiceImpl ..> CharacterInfo

class BasicConfig {
RestTemplate restTemplate
@Bean UserActionAspect loginAspect()
}

BasicConfig --> BankServerApp

class BankServerApp {
void main(String[] args)
@Bean RestTemplate template()
@Bean HttpHeaders headers()
}

class BankRestExceptionController {
ExceptionBody excessAmount(ExcessAmountException e)
ExceptionBody resourceNotFound(ResourceNotFoundException e)
}

BankRestExceptionController ..> ExceptionBody
BankRestExceptionController ..> ExcessAmountException
BankRestExceptionController ..> ResourceNotFoundException

class Client {
Long id
CharacterResult clientDetail
BigDecimal balance
}


Client -> CharacterResult


class ClientsList {
ClientsListInfo info
List<Client> clientList
}

ClientsListInfo <- ClientsList
ClientsList <- Client

class ClientsListInfo {
Long count
Integer pages
Integer next
Integer current
Integer prev
}



class Message {
String message
}

BankDbServiceImpl...> Message
BankApiServiceImpl ...> Message
BankRestController ...> Message

class Transaction {
String creditName
String debitName
BigDecimal transferAmount
}

Transaction <.. BankRestController
Transaction <.. BankDbService


class CharacterInfo {
Integer count
Integer pages
String next
String prev
}

class CharacterResult{
Integer id
String name
String status
String species
String type
String gender
String image
String url
Date created
}

class Characters {
CharacterInfo info
List<CharacterResult> results
}

Characters -> CharacterInfo

CharacterResult <- Characters








class UserActionAspect{
Object userActionLog(
ProceedingJoinPoint proceedingJoinPoint)
}

UserActionAspect ..> BasicConfig

interface TrackUserAction{}

TrackUserAction <. UserActionAspect
TrackUserAction <.. BankRestController

class ExceptionBody {
String message
LocalDateTime dateTime
}

class ExcessAmountException{
ExcessAmountException(String message)
}


class ResourceNotFoundException{
ResourceNotFoundException(String message)
}

@enduml