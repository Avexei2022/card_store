@startuml

+interface TrackUserAction {
}

TrackUserAction .> ServerApiServiceImpl
TrackUserAction .> StorageWebController

+class UserActionAspect {
+Object userActionLog(
ProceedingJoinPoint proceedingJoinPoint)
}

UserActionAspect ..> TrackUserAction

+class AuthConfig {
+String password;
}

+class AuthenticationRequest {
-String username;
-String password;
+String getRequest()
}

+class AuthenticationResponse {
-String token;
}

+class AuthenticationService {
-final BasicConfig basicConfig;
-final AuthConfig authConfig;
-RestTemplate restTemplate;
-HttpHeaders headers;
+HttpEntity<String> getRequestEntity()
+User getUserByUserName(String name)
-String getToken(String username, String password)
}

BasicConfig <-- AuthenticationService
AuthConfig <-- AuthenticationService
WarehouseApp <-- AuthenticationService
AuthenticationService .> User
AuthenticationService .> AuthenticationRequest
AuthenticationService .> AuthenticationResponse



+class BasicConfig {
-String CHARACTER_API;
-String SERVER_API;
-RestTemplate restTemplate;
+@Bean UserActionAspect loginAspect()
}

BasicConfig -> WarehouseApp
BasicConfig <.. UserActionAspect

+class WebSecurityConfig{
+@Bean UserDetailsService userDetailsService()
+@Bean BCryptPasswordEncoder passwordEncoder()
+@Bean DaoAuthenticationProvider authenticationProvider()
+@Bean SecurityFilterChain securityFilterChain(HttpSecurity http)
}

+class Message {
-String message;
}

Message <. ServerApiServiceImpl

+class StorageWebController {
-final CharacterApiService characterApiService;
-final ServerApiService serverApiService;
+String redirectToFirstPage()
+String getCharacters(
@PathVariable("page") String page
, Model model)
+String addToStorage(
@PathVariable("id") Integer id
, @PathVariable("page") String page)
+String deleteFromStorage(
@PathVariable("id") Integer id
, @PathVariable("page") String page
, Model model)
+CharacterInfo getCharacterInfo(Characters allCharacters)
+String getAllCardsInStorage(@PathVariable("page") String page
, Model model)
+String addToSale(@PathVariable("id") Integer id
, @PathVariable("page") String page)
+String deleteFromSale(@PathVariable("id") Integer id
, @PathVariable("page") String page)
+String getAllCardsInSale(@PathVariable("page") Integer page
, Model model)
}


ServerApiService <-- StorageWebController
CharacterApiService <-- StorageWebController


+class Basket {
-BasketInfo info;
-List<CardInBasket> cardInBasketList;
}

Basket --> BasketInfo
Basket ---> CardInBasket

+class BasketInfo {
-Long count;
-Integer pages;
-Integer next;
-Integer current;
-Integer prev;
-BigDecimal totalPrice;
}

+class CardInBasket {
-Long id;
-CharacterResult card;
-Integer amount;
-BigDecimal price;
-Long cardsStorageId;
-LocalDateTime created;
}

+class CharacterInfo {
-Integer count;
-Integer pages;
-String next;
-String prev;
}

+class CharacterResult {
-Integer id;
-String name;
-String status;
-String species;
-String type;
-String gender;
-String image;
-String url;
-Date created;
}

+class Characters {
-CharacterInfo info;
-List<CharacterResult> results;
}

Characters --> CharacterInfo
Characters ---> CharacterResult


+class Cards {
-CardsInfo info;
-List<CardsStorage> cardsStorageList;
}

Cards --> CardsInfo
Cards ---> CardsStorage

+class CardsInfo {
-Long count;
-Integer pages;
-Integer next;
-Integer current;
-Integer prev;
}

+class CardsStorage {
-Long id;
-CharacterResult card;
-Integer amount;
-BigDecimal price;
}

+class ThisUserDetails{
-User user;
+ Collection<? extends GrantedAuthority> getAuthorities()
+String getPassword()
+String getUsername()
+ boolean isAccountNonExpired()
+boolean isAccountNonLocked()
+boolean isCredentialsNonExpired()
+boolean isEnabled()
}

ThisUserDetails --> User
UserDetails <|... ThisUserDetails

+interface UserDetails {
}

+class User {
-Long id;
-String username;
-String password;
-String role;
-boolean enabled;
-boolean credentialsNonExpired;
-boolean accountNonExpired;
-boolean accountNonLocked;
-ArrayList<Map<String, String>> authorities;
}

+interface CharacterApiService {
+Characters getAllCharacters(String page);
+void saveOneCharacterById(Integer id);
}

+class CharacterApiServiceImpl{
-final BasicConfig basicConfig;
-RestTemplate restTemplate;
-HttpHeaders headers;
-HttpEntity<String> getRequestEntity()
+Characters getAllCharacters(String page)
+void saveOneCharacterById(Integer id)
}

CharacterApiServiceImpl ..|> CharacterApiService
WarehouseApp <-- CharacterApiServiceImpl
BasicConfig <- CharacterApiServiceImpl
CharacterApiServiceImpl .> Characters

+interface ServerApiService {
+Characters getPageFromStorage(String page);
+Message deleteFromStorageById(Integer id);
+void saveOneCardToSaleById(Integer id);
+Cards getPageCardsStorageFromSale(Integer page);
+void deleteCardFromSaleById(Integer id);
+void moveCardToBasket(Long id);
+void returnCardFromBasketToSale(Long id);
+Basket getAllFromBasket(Integer page);
}

+class ServerApiServiceImpl{
-final BasicConfig basicConfig;
-final AuthenticationService authenticationService;
-RestTemplate restTemplate;
+Characters getPageFromStorage(String page)
+Message deleteFromStorageById(Integer id)
+void saveOneCardToSaleById(Integer id)
+Cards getPageCardsStorageFromSale(Integer page)
+void deleteCardFromSaleById(Integer id)
+void moveCardToBasket(Long id)
+void returnCardFromBasketToSale(Long id)
+Basket getAllFromBasket(Integer page)
}

ServerApiServiceImpl ..|> ServerApiService
WarehouseApp <-- ServerApiServiceImpl
AuthenticationService <-- ServerApiServiceImpl
BasicConfig <-- ServerApiServiceImpl
ServerApiServiceImpl .> Characters
ServerApiServiceImpl .> Cards
ServerApiServiceImpl .> Basket

+class UserDetailsServiceImpl
{
-AuthenticationService authenticationService;
+UserDetails loadUserByUsername(String username) throws UsernameNotFoundException
}

AuthenticationService <- UserDetailsServiceImpl
UserDetailsService <|.. UserDetailsServiceImpl

+interface UserDetailsService{
}

UserDetailsService .> UserDetails
WebSecurityConfig <- UserDetailsService


+class WarehouseApp {
+static void main(String[] args)
+@Bean RestTemplate template()
+@Bean HttpHeaders headers()
}

@enduml
